//Heap(min_heap/max_heap) DS provides add,remove and find_min/find_max operations in O(logN) time. Building of heap can be done in linear time. It provides functionality of Priority Queue

package Heap;
import java.util.*;

public class Heap_DS {
	
	ArrayList<Integer> data;
	Heap_DS(){
		data = new ArrayList<>();
	}
	
	
	public void upheapify(int i) {
		if(i==0) return;
		int pi = (i-1)/2;
		if(data.get(pi)>data.get(i)) {
			swap(pi,i);
			upheapify(pi);
		}
	}
	
	public void swap(int i,int j) {
		int temp = data.get(i);
		data.set(i, data.get(j));
		data.set(j, temp);
		return;
	}
	
	public void downheapify(int i) {
		
		int L = 2*i+1;
		int R = 2*i+2;
		int min = i;
		int N = data.size();
		if(L<N && data.get(L)<data.get(min)) min= L;
		if(R<N && data.get(R)<data.get(min)) min = R;
		if(min==i) return;
		swap(min,i);
		downheapify(min);
		
	}
	
	public void add(int val) {
		
		data.add(val);
		upheapify(data.size()-1);
		
	}
	
	public int remove() {
		if(data.size()==0) {
			System.out.println("Underflow");
			return -1;
		}
		int to_return = data.get(0);
		swap(0,data.size()-1);
		data.remove(data.size()-1);
		downheapify(0);
		return to_return;
		
	}
	
	public int peek() {
		if(data.size()==0) {
			System.out.println("Underflow");
			return -1;
		}
		return data.get(0);
		
	}
	
	public int size() {
		return data.size();
	}
	
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Heap_DS heap = new Heap_DS();
		int arr[] = {7,6,4,3,2,9,8,5,6};
		for(int ele:arr) {
			heap.add(ele);
		}
		for(int i=0;i<arr.length;i++) {
			arr[i] = heap.remove();
		}
		System.out.println(Arrays.toString(arr));
	}

}
