
////////////https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/submissions/


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        if(head==null) return null;
        ListNode mid = find_mid(head);
        TreeNode root = new TreeNode(mid.val);
        root.right = sortedListToBST(mid.next);
        if(head==mid) root.left = null;
        else{
            ListNode temp = head;
            while(temp.next!=mid) temp = temp.next;
            temp.next = null;
            root.left = sortedListToBST(head);
        }
        return root;
    }
    
    public ListNode find_mid(ListNode node){
        if(node==null || node.next==null) return node;
        ListNode fast = node;
        ListNode slow = node;
        while(fast.next!=null && fast.next.next!=null){
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }
}
